{"version":3,"sources":["serviceWorker.ts","appContext.tsx","App.tsx","VideoComponent.tsx","room.tsx","router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","appContext","React","createContext","AppProvider","props","state","isActive","loading","room","autobind","Provider","value","this","children","Component","App","host","join","code","name","form","createRef","e","file","target","files","setState","formData","FormData","append","axios","post","headers","then","data","context","remoteRoom","token","username","roomName","isHost","console","log","history","push","get","fade","size","open","toggle","onChange","type","onClick","handleJoin","handleFile","className","style","width","height","renderJoinModal","renderHostModal","maxWidth","marginLeft","marginRight","marginBottom","contextType","VideoComponent","dt","LocalDataTrack","iframe","identity","roomNameErr","previewTracks","localMediaAvailable","hasJoinedRoom","activeRoom","joinRoom","send","connectOptions","tracks","undefined","Video","connect","didJoinRoom","error","container","forEach","track","appendChild","attach","participant","Array","from","values","attachTracks","current","contentWindow","onscrool","handleScrool","previewContainer","refs","localMedia","querySelector","attachParticipantTracks","localParticipant","on","kind","remoteMedia","showLocalTrack","ref","src","id","RoomPage","Router","path","component","exact","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ccc5efc8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,  { Component, Props } from \"react\";\nimport  autobind from 'class-autobind';\n\nexport const appContext = React.createContext({});\n\nexport class AppProvider extends Component<Props<any>, any>{\n\n    constructor(props){\n        super(props)\n        autobind(this);\n    }\n    state = {\n        isActive : false,\n        loading  : false,\n        room : {}\n    }\n\n    render(){\n        return(\n            <appContext.Provider value={{...this.state }}>\n                {this.props.children}\n            </appContext.Provider>\n        );\n\n    }\n    \n\n}","import React, { Component, Props} from 'react';\nimport './App.css';\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardImg,\n  CardBody,\n  CardFooter,\n  Modal, ModalBody, ModalHeader \n} from \"shards-react\";\nimport autobind from 'class-autobind';\nimport axios from 'axios';\nimport { appContext } from './appContext';\n\nexport class App extends Component<any> {\n\n  constructor(props){\n    super(props)\n    autobind(this);\n  }\n\n  state = {\n    host : false,\n    join : false,\n    code : \"\",\n    name : \"\"\n  }\n\n  form = React.createRef();\n\n\n  private handleFile(e){\n    const file = e.target.files[0];\n    if(!file){\nreturn\n    }\n    this.setState({\n      loading : true\n    })\n    const formData = new FormData();\n    formData.append(\"doc\",file);\n    \n  const r  =  axios.post(\"http://localhost:3000/setup\", formData, {\n    headers : {\n      'Content-Type': 'multipart/form-data'\n    }\n    });\n\n    r.then( (data) => {\n      //uploaded successfully \n      this.context.room = data.data.remoteRoom;\n      this.context.token = data.data.token\n      this.context.username = data.data.username\n      this.context.roomName =  data.data.room.name;\n      this.context.isHost = true;\n\n      console.log(\"context: \", this.context)\n      this.props.history.push(\"session\")\n    });\n\n\n\n\n  }\n\n  private handleJoin(){\n    console.log(this.state.code)\n    const r  =  axios.get(\"http://localhost:3000/room/\"+this.state.code + \"?name=\"+this.state.name);\n    r.then( data => {\n      console.log(data)\n      this.context.token = data.data.token;\n      this.context.username = this.state.name\n      this.context.roomName = this.state.code;\n      this.context.isHost = false;\n      this.context.room = data.data.room\n      this.props.history.push(\"session\")\n    })\n\n  }\n  private renderJoinModal(){\n      return(\n        <Modal fade={true} size=\"sm\" open={this.state.join} toggle={this.join}>\n        <ModalHeader>Join</ModalHeader>\n        <ModalBody>\n        <h3>Enter your name below:</h3>\n        <input  value={this.state.name} onChange={ (e) => { \n           this.setState({name : e.target.value })\n           }} type=\"text\"></input>\n\n          <h3>Enter code:</h3>\n         <input  value={this.state.code} onChange={ (e) => { \n           this.setState({code : e.target.value })\n           }} type=\"text\"></input>\n         <Button onClick={this.handleJoin}> Go</Button>\n        </ModalBody>\n      </Modal>\n      );\n    \n  }\n  \n  private renderHostModal(){\n    return(\n      <Modal fade={true} size=\"sm\" open={this.state.host} toggle={this.host} >\n      <ModalHeader>Host</ModalHeader>\n      <ModalBody>\n        <h4>Choose a file to upload:</h4>\n        <input type=\"file\" name=\"doc\" onChange={ this.handleFile } />\n        </ModalBody>\n    </Modal>\n    );\n  \n}\n\n  private host(){\n    this.setState({\n      host : !this.state.host,\n    })\n  }\n\n  private join(){\n    this.setState({\n      join : !this.state.join\n    })\n  }\n\n\n  render(){ \n    return(\n      \n    <div className=\"App\" style={{  width : '100%', height : '100vh'}}>\n        { this.renderJoinModal() }\n        { this.renderHostModal() }\n       <Card style={{ maxWidth: \"300px\", marginLeft : 'auto', marginRight: 'auto'} }>\n      <CardHeader>Welcome!</CardHeader>\n\n      <CardBody>\n        <CardTitle>Choose an option</CardTitle>\n        \n        <Button onClick={this.join} style={{marginBottom : 50}}>Join Session &rarr;</Button>\n        <Button onClick={this.host} >Host Session &rarr;</Button>\n\n      </CardBody>\n    </Card>\n\n    </div>\n    \n  );\n}\n}\nApp.contextType = appContext;","import { Component } from \"react\";\nimport { appContext } from \"./appContext\";\nimport autobind from 'class-autobind';\nimport React from \"react\";\n\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardTitle,\n    CardImg,\n    CardBody,\n    CardFooter,\n    Modal, ModalBody, ModalHeader\n  } from \"shards-react\";\n  import Video , { LocalDataTrack } from 'twilio-video';\n\nexport class VideoComponent extends Component {\n    constructor(props) {\n        super(props);\n        autobind(this);\n    }\n    private dt =  new LocalDataTrack();\n    private iframe : any =  React.createRef();\n    state = {\n        identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */\n        roomName: '',    /* Will store the room name */\n        roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */\n        previewTracks: null,\n        localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */\n        hasJoinedRoom: false,\n        activeRoom: null, // Track the current active room,\n        token : null,\n\n     };\n  \n     componentDidMount() {\n         console.log(this.context)\n        this.joinRoom();\n      }\n\n      private handleScrool (e){\n        console.log(e)\n\n        this.dt.send(\"scrool\")\n      }\n\n      private joinRoom() {\n             console.log(\"Joining room '\" + this.context.roomName + \"'...\");\n             let connectOptions = {\n                 name: this.context.roomName,\n                 tracks : undefined\n                };\n\n                if(this.context.host){\n                  connectOptions.tracks = [this.dt]\n                }\n             if (this.state.previewTracks) {\n                 connectOptions.tracks = this.state.previewTracks;\n             }\n\n     \n             console.log(\"Connect opotios\",connectOptions)\n             Video.connect(this.context.token, connectOptions).then(this.didJoinRoom, error => {\n                // alert('Could not connect to Twilio: ' + error.message);\n                console.log(error)\n              });\n\n            }\n\n           private  attachTracks(tracks, container) {\n               console.log(tracks)\n                tracks.forEach(track => {\n                  if(track){\n                    container.appendChild(track.attach());\n                  }\n                });\n              }\n              \n              // Attach the Participant's Tracks to the DOM.\n              attachParticipantTracks(participant, container) {\n                var tracks = Array.from(participant.tracks.values());\n                this.attachTracks(tracks, container);\n              }\n\n            private didJoinRoom(room){\n              \n                console.log(\"Joined as '\" + this.context.username + \"'\");\n  this.setState({\n    activeRoom: room,\n    localMediaAvailable: true,\n    hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’\n  });\n\n  // Attach LocalParticipant's tracks to the DOM, if not already attached.\n  this.iframe.current.contentWindow.onscrool = this.handleScrool;\n\n\n  var previewContainer =  this.refs.localMedia as any ;\n  if (!previewContainer.querySelector('video')) {\n    this.attachParticipantTracks(room.localParticipant, previewContainer);\n  }\n\n\n\n  room.on('participantConnected', participant => {\n    console.log(\"Joining: '\" + participant.identity + \"'\");\n  });\n\n  // When a Participant adds a Track, attach it to the DOM.\n  room.on('trackAdded', (track, participant) => {\n    console.log(participant.identity + ' added track: ' + track.kind);\n\n    if (track.kind === 'data') {\n      track.on('message', data => {\n        console.log(data);\n      });\n    }\n    \n    var previewContainer = this.refs.remoteMedia;\n    this.attachTracks([track], previewContainer);\n  });\n}\n      render(){\n       let showLocalTrack = this.state.localMediaAvailable ? (\n         <div className=\"flex-item\"><div ref=\"localMedia\" /> </div>) : '';   \n       /*\n        Controls showing of ‘Join Room’ or ‘Leave Room’ button.  \n        Hide 'Join Room' button if user has already joined a room otherwise \n        show `Leave Room` button.\n       */\n    //    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (\n    //    <Button label=\"Leave Room\" secondary={true} onClick={() => alert(\"Leave Room\")}  />) \n       return (\n        \n           <div className=\"flex-container\">\n             <h1>Code {this.context.roomName} </h1>\n             <iframe  style={{\n               width : '100%',\n               height : 500\n             }}\n            src={this.context.roomName}\n             //src={\"http://localhost:3000/file/\"+this.context.roomName}\n             ref={ this.iframe }>\n             </iframe>\n         {showLocalTrack} {/* Show local track if available */}\n         <div className=\"flex-item\">\n         <div className=\"flex-item\" ref=\"remoteMedia\" id=\"remote-media\" />\n       </div>\n       </div>);\n\n      }\n\n\n}\nVideoComponent.contextType = appContext;","import React, { Component, Props } from 'react';\n\nimport autobind from 'class-autobind';\nimport { VideoComponent } from './VideoComponent';\n\nexport  class RoomPage extends Component {\n    constructor(props){\n        super(props);\n        autobind(this);\n\n    }\n\n    render(){\n        return(\n            <VideoComponent></VideoComponent>\n        );\n    }\n\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport  { App } from \"./App\";\nimport { RoomPage } from \"./room\"\nexport class Router extends Component {\n\n    render(){\n        return(\n<main>\n            <Switch>\n                <Route path=\"/\" component={App} exact />\n                <Route path=\"/session\" component={RoomPage} exact />\n            </Switch>\n        </main>\n\n\n        ); \n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App }  from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './appContext';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Router } from './router';\n\nReactDOM.render(\n    <AppProvider>\n    <BrowserRouter>\n     <Router></Router>\n    </BrowserRouter>\n    </AppProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}